REST.txt

REST(Representational State Transfer)
  => 하나의 URI가 고유한 리소스(데이터)를 처리하는 공통방식
  => Open API(REST방식) => REST API( WEB API / HTTP API ) => RestFul 하게 구현
  => 주소를 표현하는 방식 ()
  => 리소스(자원을)를 이름(URI)으로 구분해서 리소스의 상태를 주고 받는 API 방식
  
 * REST API방식 개발 원칙(제약조건)
 - Client-Server
 - StateLess
 - Cacheable
 - Uniform Interface  
   => 리소스가 URI로 식별되어야 함.
   	     리소스를 생성,수정,삭제 동작에 따른 HTTP 메서드 표현
               동작(메시지) 스스로 설명을 할 수 있어야함.
               애플리케이션의 상태는 하이퍼링크로 이동가능해야함.
               
 - Layered System
 - Code on demand		
    
 * REST API 사용법
 - URI에는 동사(X) , 명사(O)표현
   /students/100 (0)
   /get-student?stuid=100 (x)
   
 - 동사를 HTTP 메서드로 표현
   GET / POST / PUT(PATCH) / DELETE
   Read Create    Update     Delete
 - 주소를 / (슬래시)를 사용해서 계층관계를 표현
   (URI의 마지막에는 / 사용x)
   	http://localhost/member/ (x)
   	http://localhost/member  (o)	
 - URI 가독성을 높이기 위해서 하이픈(-)
   (밑줄(_) 사용 X )
 - URI는 소문자로 작성(대소문자 구분)
 - 파일확장자는 포함X
 - Document(문서, 객체)
   Collection(문서들의 집합, 객체의 집합)
 * URL : Uniform Resource Locator =>    사용자가 원하는 값이 있는 곳
 	http://www.naver.com/
 	http://localhost:8088/member/
 * URI : Uniform Resource Identifier =>   " 의 주소
 
 	/ -> main.jsp
 	/member/ -> 
 * 스프링에서는 RESTful 한 개발을 하기위해서
       스프링 3.xxx => @ResponseBody 지원 (메서드 , 리턴 타입)
       스프링 4.xxx => @RESTController 지원
       
  

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 